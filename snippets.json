{
	"NewServer": {
		"prefix": "newServer",
		"body": [
			"const express = require(\"express\");",
			"const helmet = require(\"helmet\");",
			"const cors = require(\"cors\");",
			"const sessions = require(\"express-session\"); // <<<<< install express-session",
			"const KnexSessionStore = require(\"connect-session-knex\")(sessions); // to store sessions in database",
			"",
			"const authRouter = require(\"../auth/auth-router.js\");",
			"const usersRouter = require(\"../users/users-router.js\");",
			"const knex = require(\"../database/dbConfig.js\");",
			"",
			"const server = express();",
			"",
			"const sessionConfiguration = {",
			"  // session storage options",
			"  name: \"chocolatechip\", // default would be sid",
			"  secret: \"keep it secret, keep it safe!\", // used for encryption (must be an environment variable)",
			"  saveUninitialized: true, // has implications with GDPR laws",
			"  resave: false,",
			"",
			"  // how to store the sessions",
			"  store: new KnexSessionStore({",
			"    // DO NOT FORGET THE new KEYWORD",
			"    knex, // imported from dbConfig.js",
			"    createtable: true,",
			"",
			"    // optional",
			"    clearInterval: 1000 * 60 * 10, // defaults to 6000",
			"    sidfieldname: \"sid\",",
			"    tablename: \"sessions\",",
			"  }),",
			"",
			"  // cookie options",
			"  cookie: {",
			"    maxAge: 1000 * 60 * 10, // session will be good for 10 minutes in milliseconds",
			"    secure: false, // if false the cookie es sent over http, if true only sent over https",
			"    httpOnly: true, // if true JS cannot access the cookie",
			"  },",
			"};",
			"",
			"server.use(helmet());",
			"server.use(express.json());",
			"server.use(cors());",
			"server.use(sessions(sessionConfiguration)); // add a req.session object",
			"",
			"server.use(\"/api/auth\", authRouter);",
			"server.use(\"/api/users\", usersRouter);",
			"",
			"server.get(\"/\", (req, res) => {",
			"  res.json({ api: \"up\" });",
			"});",
			"",
			"module.exports = server;",
			""
		],
		"description": "Boilerplate for a new server"
	},
	"newServerIndex": {
		"prefix": "nSrvIndex",
		"body": [
			"const server = require('./api/server.js');",
			"",
			"const port = process.env.PORT || 5000;",
			"server.listen(port, () => console.log(`\\n** Running on port ${port} **\\n`));",
			""
		],
		"description": "Index file for server"
	},
	"dbConfig": {
		"prefix": "dbConfig",
		"body": [
			"const knex = require('knex');",
			"",
			"const knexConfig = require('../knexfile.js');",
			"",
			"module.exports = knex(knexConfig.development);",
			""
		],
		"description": "Database config file"
	},
	"knexDev": {
		"prefix": "knexDev",
		"body": [
			"module.exports = {",
			"  development: {",
			"    client: 'sqlite3',",
			"    useNullAsDefault: true,",
			"    connection: {",
			"      filename: './database/auth.db3',",
			"    },",
			"    pool: {",
			"      afterCreate: (conn, done) => {",
			"        conn.run('PRAGMA foreign_keys = ON', done);",
			"      },",
			"    },",
			"    migrations: {",
			"      directory: './database/migrations',",
			"    },",
			"    seeds: {",
			"      directory: './database/seeds',",
			"    },",
			"  },",
			"};",
			""
		],
		"description": "Knex configuration for dev only"
	},
	"restricMidC": {
		"prefix": "restricMidC",
		"body": [
			"module.exports = (req, res, next) => {",
			"  if (req.session && req.session.user) {",
			"    next();",
			"  } else {",
			"    res.status(401).json({ message: \"You shall not pass!!\" });",
			"  }",
			"};",
			""
		],
		"description": "REstricted middle ware file"
	},
	"authRouteC": {
		"prefix": "authRouteC",
		"body": [
			"const bcrypt = require(\"bcryptjs\");",
			"",
			"const router = require(\"express\").Router();",
			"",
			"const Users = require(\"../users/users-model\");",
			"",
			"router.post(\"/register\", (req, res) => {",
			"  let users = req.body;",
			"",
			"  const hash = bcrypt.hashSync(users.password, 10);",
			"",
			"  users.password = hash;",
			"",
			"  Users.newUser(users)",
			"    .then(newuser => {",
			"      res.status(201).json(newuser);",
			"    })",
			"    .catch(err => {",
			"      res.status(500).json(err);",
			"    });",
			"});",
			"",
			"router.post(\"/login\", (req, res) => {",
			"  let { username, password } = req.body;",
			"",
			"  Users.getByUsername({ username })",
			"    .first()",
			"    .then(user => {",
			"       // save a session for the client and send back a cookie",
			"       req.session.user = user;",
			"       ",
			"      if (user && bcrypt.compareSync(password, user.password)) {",
			"        res.status(200).json({ msg: `Welcome ${user.username}` });",
			"      } else {",
			"        res.status(400).json({ msg: \"Invalid username or password!\" });",
			"      }",
			"    })",
			"    .catch(err => {",
			"      res.status(500).json(err);",
			"    });",
			"});",
			"",
			"module.exports = router;",
			""
		],
		"description": "Basic boiler plate for authentication router"
	},
	"apiModel": {
		"prefix": "apiModel",
		"body": [
			"const db = require('../database/dbConfig.js');",
			"",
			"module.exports = {",
			"  add,",
			"  find,",
			"  findBy,",
			"  findById,",
			"};",
			"",
			"function find() {",
			"  return db('users').select('id', 'username');",
			"}",
			"",
			"function findBy(filter) {",
			"  return db('users').where(filter);",
			"}",
			"",
			"async function add(user) {",
			"  const [id] = await db('users').insert(user);",
			"",
			"  return findById(id);",
			"}",
			"",
			"function findById(id) {",
			"  return db('users')",
			"    .where({ id })",
			"    .first();",
			"}",
			""
		],
		"description": "Basic api model boilerplate"
	},
	"newRouter": {
		"prefix": "newRoute",
		"body": [
			"const router = require('express').Router();",
			"",
			"const Users = require(\"./users-model\");",
			"",
			"const restricted = require('../auth/restricted-middleware.js');//for basic authorization",
			"",
			"router.get(\"/\", (req, res) => {",
			"  Users.getUsers()",
			"    .then(users => {",
			"      res.status(200).json(users);",
			"    })",
			"    .catch(err => {",
			"      res.status(500).json(err);",
			"    });",
			"});",
			"",
			"module.exports = router;",
			""
		],
		"description": "Basic router boiler plate"
	},
	"apiRouter": {
		"prefix": "apiRoute",
		"body": [
			"const router = require('express').Router();",
			"",
			"const authRouter = require('../auth/auth-router');",
			"const usersRouter = require('../users/users-router');",
			"",
			"router.use('/auth', authRouter);",
			"router.use('/users', usersRouter);",
			"",
			"router.get('/', (req, res) => {",
			"  res.json({ api: \"API server is running correctly\" });",
			"});",
			"",
			"module.exports = router;",
			""
		],
		"description": "Api router boilerplate"
	},
	"restrictedMidT": {
		"prefix": "restrictedMidT",
		"body": [
			"const jwt = require(\"jsonwebtoken\"); // installed this",
			"",
			"module.exports = (req, res, next) => {",
			"  const { authorization } = req.headers;",
			"",
			"  if (authorization) {",
			"    const secret = process.env.JWT_SECRET || \"is it secret, is it safe?\";",
			"",
			"    jwt.verify(authorization, secret, function(err, decodedToken) {",
			"      if (err) {",
			"        res.status(401).json({ message: \"Invalid Token\" });",
			"      } else {",
			"        req.token = decodedToken;",
			"",
			"        next();",
			"      }",
			"    });",
			"  } else {",
			"    res.status(400).json({ message: \"Please login and try again\" });",
			"  }",
			"};",
			""
		],
		"description": "Boiler plate for restricted-middleware with token"
	},
	"authRouteT": {
		"prefix": "authRouteT",
		"body": [
			"const router = require(\"express\").Router();",
			"const bcrypt = require(\"bcryptjs\");",
			"const jwt = require(\"jsonwebtoken\"); // installed this",
			"",
			"const Users = require(\"../users/users-model.js\");",
			"",
			"// for endpoints beginning with /api/auth",
			"router.post(\"/register\", (req, res) => {",
			"  let user = req.body;",
			"  const hash = bcrypt.hashSync(user.password, 10); // 2 ^ n",
			"  user.password = hash;",
			"",
			"  Users.add(user)",
			"    .then(saved => {",
			"      res.status(201).json(saved);",
			"    })",
			"    .catch(error => {",
			"      res.status(500).json(error);",
			"    });",
			"});",
			"",
			"router.post(\"/login\", (req, res) => {",
			"  let { username, password } = req.body;",
			"",
			"  Users.findBy({ username })",
			"    .first()",
			"    .then(user => {",
			"      if (user && bcrypt.compareSync(password, user.password)) {",
			"        // sign token",
			"        const token = signToken(user); // new line",
			"",
			"        // send the token",
			"        res.status(200).json({",
			"          token, // added token as part of the response sent",
			"          message: `Welcome ${user.username}!`,",
			"        });",
			"      } else {",
			"        res.status(401).json({ message: \"Invalid Credentials\" });",
			"      }",
			"    })",
			"    .catch(error => {",
			"      res.status(500).json(error);",
			"    });",
			"});",
			"",
			"// this functions creates and signs the token",
			"function signToken(user) {",
			"  const payload = {",
			"    username: user.username,",
			"    role: \"student\", // this will come from the database users.role",
			"  };",
			"",
			"  const secret = process.env.JWT_SECRET || \"is it secret, is it safe?\";",
			"",
			"  const options = {",
			"    expiresIn: \"1h\",",
			"  };",
			"",
			"  return jwt.sign(payload, secret, options); // notice the return",
			"}",
			"",
			"module.exports = router;",
			""
		],
		"description": "Boiler plate for auth-rouer with tokens"
	},
	"newServerT": {
		"prefix": "newServerT",
		"body": [
			"const express = require('express');",
			"const helmet = require('helmet');",
			"const cors = require('cors');",
			"",
			"const authRouter = require('../auth/auth-router.js');",
			"const usersRouter = require('../users/users-router.js');",
			"",
			"const server = express();",
			"",
			"server.use(helmet());",
			"server.use(express.json());",
			"server.use(cors());",
			"",
			"server.use('/api/auth', authRouter);",
			"server.use('/api/users', usersRouter);",
			"",
			"server.get('/', (req, res) => {",
			"  res.send(\"It's alive!\");",
			"});",
			"",
			"module.exports = server;",
			""
		],
		"description": "Boiler plate for a server with token authentication"
	},
	"createTable": {
		"prefix": "createTable",
		"body": [
			"return knex.schema.createTable('tableName', tbl =>{",
			"      tbl.increments();",
			"  })"
		],
		"description": "Knex boilerplate for creating a table"
	},
	"schemaUser": {
		"prefix": "schemaUser",
		"body": [
			"tbl",
			"      .string(\"username\")",
			"      .notNullable()",
			"      .unique();",
			"",
			"    tbl.string(\"password\").notNullable();"
		],
		"description": "Knex schema for username and password"
	},
	"dropTbl": {
		"prefix": "dropTbl",
		"body": [
			"return knex.schema.dropTableIfExists('tblName');"
		],
		"description": "Knex boilerplate for exports.down"
	}
}

//Creator/Contributor: ikeman32:David Isakson